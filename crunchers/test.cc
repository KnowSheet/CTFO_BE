/*******************************************************************************
 The MIT License (MIT)

 Copyright (c) 2016 Grigory Nikolaenko <nikolaenko.grigory@gmail.com>


 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 *******************************************************************************/

#include <sstream>

#include "../../Current/Bricks/dflags/dflags.h"
#include "../../Current/3rdparty/gtest/gtest-main-with-dflags.h"
#include "../../Current/Sherlock/sherlock.h"
#include "../../Current/Sherlock/replicator.h"

#include "../ctfo_server.h"

#include "cruncher_active_users.h"
#include "schema.h"

DEFINE_bool(write_ctfo_storage_golden_files, false, "Set to `true` to [over]write golden files.");
DEFINE_string(golden_filename, "golden_db.json", "");
DEFINE_int32(sherlock_http_test_port,
             PickPortForUnitTest(),
             "Local port to use remote subscription unit test.");

TEST(CTFOCrunchersTest, AutogeneratedStorageIsUpToDate) {
  std::ostringstream golden;

  CTFO_2016_08_01::iOSGenericEvent favorite_event;
  favorite_event.event = "SEEN";
  favorite_event.fields["cid"] = "fake_cid";
  favorite_event.fields["token"] = "fake_token";

  uint64_t now = 0;
  uint64_t interval = 1000llu * 3600 * 3600;
  idxts_t idxts(0, std::chrono::microseconds(0));

  for (uint64_t j = 0; j < 5; ++j) {
    for (uint64_t i = j * 2; i < 20; ++i) {
      CTFO_2016_08_01::EventLogEntry log_entry;
      favorite_event.user_ms = std::chrono::milliseconds(now);
      favorite_event.device_id = std::string("device_id_") + current::ToString(i);
      favorite_event.fields["uid"] = std::string("fake_uid_") + current::ToString(i);
      log_entry.server_us = idxts.us;
      log_entry.event = favorite_event;
      golden << JSON(idxts) << "\t" << JSON(CTFO_2016_08_01::CTFOLogEntry(log_entry)) << std::endl;
      now += interval;
      idxts.us = std::chrono::microseconds(now * 1000);
      ++idxts.index;
    }
    interval /= 60;
  }

  if (!FLAGS_write_ctfo_storage_golden_files) {
    EXPECT_EQ(current::FileSystem::ReadFileAsString(FLAGS_golden_filename), golden.str());
  } else {
    current::FileSystem::WriteStringToFile(golden.str(), FLAGS_golden_filename.c_str());
  }
}

CURRENT_NAMESPACE(CTFO_Local) {
  CURRENT_NAMESPACE_TYPE(CTFOLogEntry, CTFO::CTFOLogEntry);
  CURRENT_NAMESPACE_TYPE(EventLogEntry, current::midichlorians::server::EventLogEntry);
  CURRENT_NAMESPACE_TYPE(iOSGenericEvent, current::midichlorians::ios::iOSGenericEvent);
  CURRENT_NAMESPACE_TYPE(iOSFocusEvent, current::midichlorians::ios::iOSFocusEvent);
  CURRENT_NAMESPACE_TYPE(iOSIdentifyEvent, current::midichlorians::ios::iOSIdentifyEvent);
  CURRENT_NAMESPACE_TYPE(iOSAppLaunchEvent, current::midichlorians::ios::iOSAppLaunchEvent);
  CURRENT_NAMESPACE_TYPE(iOSFirstLaunchEvent, current::midichlorians::ios::iOSFirstLaunchEvent);
  CURRENT_NAMESPACE_TYPE(iOSBaseEvent, current::midichlorians::ios::iOSBaseEvent);
};

TEST(CTFOCrunchersTest, AcriveUsersCruncherTest) {
  const auto schema_key = CTFO::SchemaKey();
  CTFO::CTFOServer::stream_t local_stream(schema_key, FLAGS_golden_filename);
  CTFO::CTFOServer::storage_t storage(local_stream);
  storage.ExposeRawLogViaHTTP(FLAGS_sherlock_http_test_port, "/raw_log");

  current::sherlock::SubscribableRemoteStream<CTFO_2016_08_01::CTFOLogEntry> remote_stream(
      Printf("http://localhost:%d/raw_log", FLAGS_sherlock_http_test_port),
      schema_key.top_level_name,
      schema_key.namespace_name);

  using CTFOActiveUsersCruncherLocal = CTFO::ActiveUsersCruncher<CTFO_Local>;
  using CTFOActiveUsersCruncherRemote = CTFO::ActiveUsersCruncher<CTFO_2016_08_01>;

  auto activeusers_cruncher_local = std::make_unique<CTFOActiveUsersCruncherLocal>(std::chrono::seconds(1u));
  auto activeusers_cruncher_remote = std::make_unique<CTFOActiveUsersCruncherRemote>(std::chrono::seconds(1u));

#define SUBSCRIBE_AND_WAIT()                                                                      \
  do {                                                                                            \
    const auto scope_local = local_stream.Subscribe(*activeusers_cruncher_local);                 \
    const auto scope_remote = remote_stream.Subscribe(*activeusers_cruncher_remote);              \
    while (activeusers_cruncher_local->Size() < 80 || activeusers_cruncher_remote->Size() < 80) { \
      std::this_thread::yield();                                                                  \
    }                                                                                             \
  } while (false)

  SUBSCRIBE_AND_WAIT();
  EXPECT_EQ(1u, activeusers_cruncher_local->Count());
  EXPECT_EQ(1u, activeusers_cruncher_remote->Count());

  activeusers_cruncher_local = std::make_unique<CTFOActiveUsersCruncherLocal>(std::chrono::seconds(12u));
  activeusers_cruncher_remote = std::make_unique<CTFOActiveUsersCruncherRemote>(std::chrono::seconds(12u));
  SUBSCRIBE_AND_WAIT();
  EXPECT_EQ(12u, activeusers_cruncher_local->Count());
  EXPECT_EQ(12u, activeusers_cruncher_remote->Count());

  activeusers_cruncher_local = std::make_unique<CTFOActiveUsersCruncherLocal>(std::chrono::minutes(10u));
  activeusers_cruncher_remote = std::make_unique<CTFOActiveUsersCruncherRemote>(std::chrono::minutes(10u));
  SUBSCRIBE_AND_WAIT();
  EXPECT_EQ(12u, activeusers_cruncher_local->Count());
  EXPECT_EQ(12u, activeusers_cruncher_remote->Count());

  activeusers_cruncher_local = std::make_unique<CTFOActiveUsersCruncherLocal>(std::chrono::minutes(15u));
  activeusers_cruncher_remote = std::make_unique<CTFOActiveUsersCruncherRemote>(std::chrono::minutes(15u));
  SUBSCRIBE_AND_WAIT();
  EXPECT_EQ(14u, activeusers_cruncher_local->Count());
  EXPECT_EQ(14u, activeusers_cruncher_remote->Count());

  activeusers_cruncher_local = std::make_unique<CTFOActiveUsersCruncherLocal>(std::chrono::hours(10u));
  activeusers_cruncher_remote = std::make_unique<CTFOActiveUsersCruncherRemote>(std::chrono::hours(10u));
  SUBSCRIBE_AND_WAIT();
  EXPECT_EQ(14u, activeusers_cruncher_local->Count());
  EXPECT_EQ(14u, activeusers_cruncher_remote->Count());

  activeusers_cruncher_local = std::make_unique<CTFOActiveUsersCruncherLocal>(std::chrono::hours(17u));
  activeusers_cruncher_remote = std::make_unique<CTFOActiveUsersCruncherRemote>(std::chrono::hours(17u));
  SUBSCRIBE_AND_WAIT();
  EXPECT_EQ(16u, activeusers_cruncher_local->Count());
  EXPECT_EQ(16u, activeusers_cruncher_remote->Count());

  activeusers_cruncher_local = std::make_unique<CTFOActiveUsersCruncherLocal>(std::chrono::hours(600u));
  activeusers_cruncher_remote = std::make_unique<CTFOActiveUsersCruncherRemote>(std::chrono::hours(600u));
  SUBSCRIBE_AND_WAIT();
  EXPECT_EQ(16u, activeusers_cruncher_local->Count());
  EXPECT_EQ(16u, activeusers_cruncher_remote->Count());

  activeusers_cruncher_local = std::make_unique<CTFOActiveUsersCruncherLocal>(std::chrono::hours(1100u));
  activeusers_cruncher_remote = std::make_unique<CTFOActiveUsersCruncherRemote>(std::chrono::hours(1100u));
  SUBSCRIBE_AND_WAIT();
  EXPECT_EQ(18u, activeusers_cruncher_local->Count());
  EXPECT_EQ(18u, activeusers_cruncher_remote->Count());

  activeusers_cruncher_local = std::make_unique<CTFOActiveUsersCruncherLocal>(std::chrono::hours(36000u));
  activeusers_cruncher_remote = std::make_unique<CTFOActiveUsersCruncherRemote>(std::chrono::hours(36000u));
  SUBSCRIBE_AND_WAIT();
  EXPECT_EQ(18u, activeusers_cruncher_local->Count());
  EXPECT_EQ(18u, activeusers_cruncher_remote->Count());

  activeusers_cruncher_local = std::make_unique<CTFOActiveUsersCruncherLocal>(std::chrono::hours(73000u));
  activeusers_cruncher_remote = std::make_unique<CTFOActiveUsersCruncherRemote>(std::chrono::hours(73000u));
  SUBSCRIBE_AND_WAIT();
  EXPECT_EQ(19u, activeusers_cruncher_local->Count());
  EXPECT_EQ(19u, activeusers_cruncher_remote->Count());

  activeusers_cruncher_local = std::make_unique<CTFOActiveUsersCruncherLocal>(std::chrono::hours(73100u));
  activeusers_cruncher_remote = std::make_unique<CTFOActiveUsersCruncherRemote>(std::chrono::hours(73100u));
  SUBSCRIBE_AND_WAIT();
  EXPECT_EQ(20u, activeusers_cruncher_local->Count());
  EXPECT_EQ(20u, activeusers_cruncher_remote->Count());
}
